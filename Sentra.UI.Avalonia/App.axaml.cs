using System;
using System.Linq;
using System.Threading.Tasks;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Avalonia.Threading;
using Microsoft.EntityFrameworkCore;
using Sentra.Application.Embedding;
using Sentra.Application.Indexing;
using Sentra.UI.Avalonia.Views;
using Sentra.Infrastructure.Persistence;
using SharpHook;
using SharpHook.Native;

namespace Sentra.UI.Avalonia;

public partial class App : global::Avalonia.Application
{
    public static double IndexingProgress { get; set; } = 0;

    private TaskPoolGlobalHook? _hook;
    private SearchWindow? _searchWindow;

    public override void Initialize()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            Console.WriteLine("== Sentra –∑–∞–ø—É—â–µ–Ω–∞ ==");

            // –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
            var db           = new EmbeddingDbContext();
            var embed        = new EmbeddingClient();
            var vectorIndex  = new HnswVectorIndex();

            // 0) –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –ë–î (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            Task.Run(async () =>
            {
                var existing = await db.Chunks
                    .AsNoTracking()
                    .Select(c => new { c.Id, c.EmbeddingJson })
                    .ToListAsync();
                foreach (var c in existing)
                {
                    var vec = System.Text.Json.JsonSerializer.Deserialize<float[]>(c.EmbeddingJson);
                    if (vec?.Length > 0)
                        vectorIndex.AddItem(c.Id, vec);
                }
                Console.WriteLine($"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {existing.Count} –≤–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î");

                // 1) –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é (–¥–æ–±–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏)
                var indexer = new Indexer(db, embed, vectorIndex);
                Console.WriteLine("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...");
                await indexer.RunAsync(new Progress<double>(p =>
                {
                    IndexingProgress = p;
                    Console.WriteLine($"üìä –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {(p * 100):0.0}%");
                }));

                IndexingProgress = 1;
                Console.WriteLine("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            });

            // 2) –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ —Å —Ç–µ–º–∏ –∂–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            _searchWindow = new SearchWindow(db, embed, vectorIndex);

            // 3) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π
            _hook = new TaskPoolGlobalHook();
            _hook.KeyPressed += OnGlobalHotkey;
            _hook.RunAsync();

            desktop.Exit += (_, _) =>
            {
                _hook?.Dispose();
                Console.WriteLine("üõë Hook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            };

            Console.WriteLine("üîó –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void OnGlobalHotkey(object? sender, KeyboardHookEventArgs e)
    {
        if (e.Data.KeyCode == KeyCode.VcSpace &&
            (e.RawEvent.Mask & ModifierMask.Ctrl) != 0)
        {
            Console.WriteLine("üéØ Ctrl + Space —Å—Ä–∞–±–æ—Ç–∞–ª");
            Dispatcher.UIThread.Post(() =>
            {
                if (_searchWindow is { IsVisible: false })
                {
                    _searchWindow.ShowCentered();
                }
            });
        }
    }
}