using System;
using System.Threading.Tasks;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml;
using Avalonia.Threading;
using Sentra.Application.Embedding;
using Sentra.Application.Indexing;
using Sentra.Infrastructure.Persistence;
using Sentra.UI.Avalonia.Views;
using SharpHook;
using SharpHook.Native;

namespace Sentra.UI.Avalonia;

public partial class App : global::Avalonia.Application
{
    public static double IndexingProgress { get; set; } = 0;

    private TaskPoolGlobalHook? _hook;
    private SearchWindow? _searchWindow;

    public override void Initialize()
    {
        AvaloniaXamlLoader.Load(this);
    }

    public override void OnFrameworkInitializationCompleted()
    {
        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
        {
            Console.WriteLine("== Sentra –∑–∞–ø—É—â–µ–Ω–∞ ==");

            _searchWindow = new SearchWindow();

            // ‚úÖ –°—Ç–∞—Ä—Ç—É–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            _ = Task.Run(async () =>
            {
                var db = new EmbeddingDbContext();
                var embed = new EmbeddingClient();
                var indexer = new Indexer(db, embed);

                Console.WriteLine("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...");

                await indexer.RunAsync(new Progress<double>(p =>
                {
                    App.IndexingProgress = p;
                    Console.WriteLine($"üìä –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: {(p * 100):0.0}%");
                }));

                App.IndexingProgress = 1; // ‚¨ÖÔ∏è —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                Console.WriteLine("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            });

            _hook = new TaskPoolGlobalHook();
            _hook.KeyPressed += OnGlobalHotkey;
            _hook.RunAsync();

            desktop.Exit += (_, _) =>
            {
                _hook?.Dispose();
                Console.WriteLine("üõë Hook –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            };

            Console.WriteLine("üîó –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Ç–∫–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        base.OnFrameworkInitializationCompleted();
    }

    private void OnGlobalHotkey(object? sender, KeyboardHookEventArgs e)
    {
        if (e.Data.KeyCode == KeyCode.VcSpace &&
            (e.RawEvent.Mask & ModifierMask.Ctrl) != 0)
        {
            Console.WriteLine("üéØ Ctrl + Space —Å—Ä–∞–±–æ—Ç–∞–ª");

            Dispatcher.UIThread.Post(() =>
            {
                if (_searchWindow is { IsVisible: false })
                {
                    _searchWindow.Show();
                }
            });
        }
    }
}